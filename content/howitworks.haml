---
title: How it works
---

- latest_api_version = 'b7'

#howitworks
.content_wrap
  .content_pad
    .sixcol
      %h2 How you did it before
      %p This is how your statically linked assets in the head of your website might look like. They would be served by your server via 5 separate requests.
      %pre.code
        :escaped
          <head>
            <title>My website</title>

            <!-- Stylesheets -->
            <link rel="stylesheet" href="/css/base.css">
            <link rel="stylesheet" href="/css/navigation.css">

            <!-- Javascript -->
            <script src="/js/jquery.js"></script>
            <script src="/js/plugin.js"></script>
            <script src="/js/site.js"></script>

          </head>

    .sixcol.last
      %h2 With Assets.io
      %p And this is the same code rewritten using our API, but now the assets are packaged, minified and served via CDN! The number of requests is also reduced from 5 to 3.
      %pre.code
        :escaped
          <head>
            <title>My website</title>

            <script src="http://api.assets.io/#{latest_api_version}/"></script>

            <script>
              assets.account('<your-account-id>');
              assets.live('http://www.my-site.com');
              assets.css('/css/base.css /css/navigation.css');
              assets.js('/js/jquery.js /js/plugin.js /js/site.js');
            </script>
          </head>
  .twelvecol
    %section.api-documentation
      %h1 Detailed Documentation

  .twelvecol
    %h2 Loading the Javascript API
  .sixcol
    %p Before any Assets.io functionality can be used within your website, the API script needs to be loaded.
    %p The latest API version is '#{latest_api_version}'; load it from your document head:
  .sixcol.last
    %pre.code
      :escaped
        <script src="http://api.assets.io/#{latest_api_version}/"></script>

        <!-- or load the API with SSL -->
        <script src="https://api.assets.io/#{latest_api_version}/"></script>

.content_wrap
  .content_pad
    .twelvecol
      %h2 Specifying the account
      %p.method-signature assets.account( account-id )
    .sixcol
      %p
        As an Assets.io user you will have at least one account. The account maps to a so called distribution within the Content Delivery Network and is basically a unit of accounting. Statistics are gathered per account and you get to set the allowed source hosts per account
        %a(href="https://secure.assets.io") in the Assets.io management interface
        \. It is generally a good idea to use a different account for each of your websites.
    .sixcol.last
      %pre.code
        :escaped
          assets.account('dld6ysvane9zb');

.content_wrap
  .content_pad
    .twelvecol
      %h2#assets-on Setting the live host
      %p.method-signature assets.live( live-host-url )
    .sixcol
      %p
        The Assets.io Javascript API has two modes of operation:
      %ul
        %li
          %strong Development mode:
          When your website is not served from the live host (e.g. your local development webserver or even from the filesystem), all assets will be loaded individually and directly from their respective sources. No CDN delivery, packaging or minification will be active.
        %li
          %strong Live mode:
          Only when your website is served from the specified live host, the Assets.io service will kick in and turbo-charge your assets.
        %p
          You can force "Live mode" by calling
          %a(href="#assets-force") assets.force()
          to test the live behaviour locally.
    .sixcol.last
      %pre.code
        :escaped
          assets.live('http://www.my-site.com');

.content_wrap
  .content_pad
    .twelvecol
      %h2#assets-force Forcing live mode
      %p.method-signature assets.force( )
    .sixcol
      %p Force the Javascript API into "Live mode" even while testing locally.
      %p
        Please bear in mind that in live mode all assets will be requested by the Assets.io servers. Thus they need to be publicly available on the internet.
    .sixcol.last
      %pre.code
        :escaped
          assets.force();

.content_wrap
  .content_pad
    .twelvecol
      %h2#assets-base Setting the assets base url
      %p.method-signature assets.base( base-url )
    .sixcol
      %p
        Setting an assets base allows you to load assets from a different host than your live host. The assets base only applies to source locations that are given relative to the document root (e.g. /css/site.css) or the current page (e.g. ../css/site.css).
      %p
        %strong If you like things to just work (even when viewing your page from the filesystem), follow a simple rule: Always set a live host and never reference your assets relative to the document served (e.g. "../../css/site.css").
    .sixcol.last
      %pre.code
        :escaped
          assets.base('http://assets.my-site.com');

.content_wrap
  .content_pad
    .twelvecol
      %h2#assets-debug Enable debugging
      %p.method-signature assets.debug( )
    .sixcol
      %p
        Enable extra debug information. In "Live Mode" the Assets.io comment at the top of any delivered asset will include extra information about the source locations and given options.
    .sixcol.last
      %pre.code
        :escaped
          assets.debug();

.content_wrap
  .content_pad
    .twelvecol
      %h2#assets-minifiy Enable/Disable minification
      %p.method-signature assets.minify( boolean )
    .sixcol
      %p
        Normally all assets will be minified before delivering them, but you can turn this feature off if you want to keep your sources readable.
    .sixcol.last
      %pre.code
        :escaped
          assets.minify(false);

.content_wrap
  .content_pad
    .twelvecol
      %h2#assets-version Set the assets version (globally)
      %p.method-signature assets.version( version-id )
    .sixcol
      %p
        Once assets have been built they are delivered from the CDN cache for subsequent requests. If any of your sources changes, theses changes can not be reflected in the built asset. By specifying a (different) version you basically make it a new asset and force a re-build. The version-id can be either a string (e.g. 'v1.0.0') or a plain number.
    .sixcol.last
      %pre.code
        :escaped
          assets.version(1);

.content_wrap
  .content_pad
    .twelvecol
      %h2#assets-css Loading CSS assets
      %p.method-signature assets.css( sources, [ version ], [ options ] )
      %p.method-signature assets.css( sources-with-options )
    .sixcol
      %p
        Load a package of CSS sources. In "Development mode" each source will be loaded individually.
      %p Options set gloabally (on, base, version, force, debug, minify) can be overridden by passing an options object.
    .sixcol.last
      %pre.code
        :escaped
          assets.css('/css/base.css /css/navigation.css');

          // with version
          assets.css('/css/base.css /css/navigation.css', 23);

          // sources may also be given as an array
          assets.css(['/css/base.css', '/css/navigation.css'], 23);

          // with options only
          assets.css({
            src:     '/css/base.css /css/navigation.css',
            version: 23,
            base:    'http://css.my-site.com',
            force:   true
          });

.content_wrap
  .content_pad
    .twelvecol
      %h2#assets-js Loading JavaScript assets
      %p.method-signature assets.js( sources, [ version ], [ options ], [ callback ] )
      %p.method-signature assets.js( sources-with-options, [ callback ] )
    .sixcol
      %p
        Load a package of Javascript sources and optionally execute the given callback function. In "Development mode" each source will be loaded individually.
      %p Options set gloabally (on, base, version, force, debug, minify) can be overridden by passing an options object.
    .sixcol.last
      %pre.code
        :escaped
          assets.js('/js/jquery.js /js/plugin.js /js/site.js');

          // with version
          assets.js('/js/jquery.js /js/plugin.js /js/site.js', 23);

          // sources may also be given as an array
          assets.js(['/js/jquery.js', '/js/plugin.js', '/js/site.js'], 23);

          // with options only
          assets.js({
            src:     '/js/jquery.js /js/plugin.js /js/site.js',
            version: 23,
            base:    'http://js.my-site.com',
            force:   true
          });

          // with callback
          assets.js('/js/jquery.js /js/plugin.js /js/site.js', 23, function () {
            alert('My JS asset has completed loading');
          });

.content_wrap
  .content_pad
    .twelvecol
      %h2 Examples
      %p Here are two examples of using the API in one simple and one advanced setup.

.content_wrap
  .content_pad
    .fourcol
      %h2 Simple example
      %p In this example, two CSS and three JS files are loaded from a single server locations. The assets are loaded from the default server given in the .live() method call.
      %p In development, these assets will be loaded seperately, on the live environment on "www.mysite.com", the Assets.io API will kick in and serve the assets minified and concatenated, all will share the same version id.
    .eightcol.last
      %pre.code
        :escaped
          <script src="http://api.assets.io/#{latest_api_version}/"></script>
          <script>

            // Set the account id
            // This id is provided to you in the Assets.io management interface
            // at https://secure.assets.io
            assets.account('<your-account-id>');

            // Setting the live host to enable Assets.io
            // when your site is deployed
            // Assets.io won't deliver your assets unless your documents are served from this server
            assets.live("http://www.mysite.com");

            // If you enable this line, your assets will be requested from Assets.io
            // even when you are developing locally
            // assets.force();

            // Set a global asset version id
            // If you change this number and deploy your site,
            // a new version of the all assets will be requested
            // immediately on the next request, unless a seperate
            // version id is given in the request
            assets.version( 12345 );

            // Load two CSS files, they will be minified and concatenated
            assets.css('/css/base.css /css/navigation.css');

            // Load three js files from the new location
            assets.js('/js/jquery.js /js/plugin.js /js/site.js');
          </script>

.content_wrap
  .content_pad
    .fourcol
      %h2 Advanced example
      %p In this example, two CSS files are loaded from the default location given by .live().
      %p After that, a single non-minified CSS file is loaded from a different location and with a different version id.
      %p The next JS files are going to be loaded from yet another location given by a call to the .base() method.
      %p The last assets requested are three JS files, again served by a different host, but this time, the host is given in the options parameter of the .js() method. As no version number is given, the global version "1" will be used, that has been set above.
    .eightcol.last
      %pre.code
        :escaped
          <script src="http://api.assets.io/#{latest_api_version}/"></script>
          <script>

            // Set the account id
            // This id is provided to you in the Assets.io management interface
            // at https://secure.assets.io
            assets.account('<your-account-id>');

            // Setting the live host to enable Assets.io
            // when your site is deployed
            // Assets.io won't process your assets unless your documents are served from this server
            assets.live("//www.mysite.com");

            // If you enable this line, your assets will be requested from Assets.io
            // even when you are developing locally
            // assets.force();

            // Set a global asset version id
            // If you change this number and deploy your site,
            // a new version of the all assets will be requested
            // immediately on the next request, unless a seperate
            // version id is given in the request
            assets.version( 1 );

            // Load two CSS files, they will be minified and concatenated
            // They will be requested from "www.mysite.com" width the version id "1"
            assets.css('/css/base.css /css/navigation.css');

            // One CSS file, will NOT be minified and requested from "css.mysite.com"
            // with the version id 'just-a-test'
            assets.css('/css/i_am_readable.css', {
                base : 'http://css.mysite.com',
                version : 'just-a-test',
                minify : false
            });

            // Setting the new base, all subsequent requests will be made against "js.mysite.com"
            assets.base("http://js.mysite.com");

            // Load two JS files, minified and concatenated, with version id "12345"
            assets.js("/js/app.js /js/data.js", 12345);

            // Load three JS files, minified and concatenated, but from different host
            assets.js("/js/extra/one.js /js/extra/two.js /js/extra/three.js", {
                base : 'http://assets.mysite.com'
            });

          </script>
